const { Sequelize, DataTypes } = require('sequelize');
const sequelize = new Sequelize('your_database', 'username', 'password', {
  host: 'localhost',
  dialect: 'mysql'
});

const Patient = sequelize.define('patients', {
  name: DataTypes.STRING,
  patient_mrn: DataTypes.STRING,
  patient_birth_date: DataTypes.DATE,
  patient_sex: DataTypes.STRING,
});

const Study = sequelize.define('studies', {
  study_instance_uid: DataTypes.STRING,
  study_date: DataTypes.DATE,
  study_description: DataTypes.STRING,
  createdAt: DataTypes.DATE,
  patient_id: DataTypes.INTEGER,
});

const StudySeries = sequelize.define('study_series', {
  series_instance_uid: DataTypes.STRING,
  series_date: DataTypes.DATE,
  series_description: DataTypes.STRING,
  modality: DataTypes.STRING,
  accession_no: DataTypes.STRING,
  patient_id: DataTypes.INTEGER,
});

const Instance = sequelize.define('instances', {
  instance_num: DataTypes.INTEGER,
  sop_instance_uid: DataTypes.STRING,
  createdAt: DataTypes.DATE,
  study_series_id: DataTypes.INTEGER,
});

// Relationships
Patient.hasMany(Study, { foreignKey: 'patient_id' });
Study.belongsTo(Patient, { foreignKey: 'patient_id' });

Study.hasMany(StudySeries, { foreignKey: 'study_id' });
StudySeries.belongsTo(Study, { foreignKey: 'study_id' });

StudySeries.hasMany(Instance, { foreignKey: 'study_series_id' });
Instance.belongsTo(StudySeries, { foreignKey: 'study_series_id' });








const express = require('express');
const app = express();

// Import models
const { Patient, Study, StudySeries, Instance } = require('./models'); // Adjust path accordingly

app.get('/patients/:id', async (req, res) => {
  try {
    const patientId = req.params.id;
    const patient = await Patient.findOne({
      where: { id: patientId },
      include: [
        {
          model: Study,
          include: [
            {
              model: StudySeries,
              include: [Instance],
            },
          ],
        },
      ],
    });

    if (!patient) {
      return res.status(404).json({ message: 'Patient not found' });
    }

    const data = patient.studies.map(study => ({
      patientName: patient.name,
      MRN: patient.patient_mrn,
      studyDate: study.study_date,
      studyDescription: study.study_description,
      modality: study.study_series[0]?.modality,
      accession: study.study_series[0]?.accession_no,
      instances: study.study_series[0]?.instances.map(instance => instance.instance_num),
    }));

    res.json(data);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

app.listen(3000, () => {
  console.log('Server running on port 3000');
});






[
  {
    "patientName": "John Doe",
    "MRN": "123456",
    "studyDate": "2023-07-23",
    "studyDescription": "Chest X-ray",
    "modality": "XRAY",
    "accession": "ACC123",
    "instances": [1, 2, 3]
  }
]




const express = require('express');
const sequelize = require('./config/database');
const patientRoutes = require('./routes/patients');

// Initialize the app
const app = express();

// Sync the database and create tables
sequelize.sync({ force: true }).then(() => {
  console.log('Database & tables created!');
  insertSampleData(); // Insert sample data after creating tables
});

// Middleware
app.use(express.json());

// Use patient routes
app.use('/patients', patientRoutes);

// Start the server
app.listen(3000, () => {
  console.log('Server is running on port 3000');
});

// Sample data insertion
async function insertSampleData() {
  const Patient = require('./models/patient');
  const Study = require('./models/study');
  const StudySeries = require('./models/studySeries');
  const Instance = require('./models/instance');

  const newPatient = await Patient.create({
    name: 'John Doe',
    patient_mrn: 'MRN123456',
    patient_birth_date: '1980-05-12',
    patient_sex: 'M',
  });

  const newStudy = await Study.create({
    study_instance_uid: '1.2.3.4',
    study_date: '2024-09-23',
    study_description: 'Chest X-ray',
    patient_id: newPatient.id,
  });

  const newStudySeries = await StudySeries.create({
    series_instance_uid: '5.6.7.8',
    series_date: '2024-09-23',
    series_description: 'Series 1 Description',
    modality: 'XRAY',
    accession_no: 'ACC123456',
    study_id: newStudy.id,
  });

  await Instance.create({
    instance_num: 1,
    sop_instance_uid: 'SOP123456',
    study_series_id: newStudySeries.id,
  });

  console.log('Sample data inserted!');
}
